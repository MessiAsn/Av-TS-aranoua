Prova: Python e Selenium
Parte 1: Questões Teóricas (5 questões)

	Explique a diferença entre Selenium IDE e Selenium WebDriver. (2 pontos)
O Selenium IDE é uma ferramenta de automação de testes que permite gravar, editar e reproduzir testes no navegador. Ele é mais adequado para iniciantes e projetos simples.
O Selenium WebDriver permite a automação de testes usando várias linguagens de programação. Ele é mais poderoso e flexível, sendo ideal para projetos complexos e profissionais, pois possibilita maior controle e integração com outras ferramentas.


Quais são os principais tipos de localizadores (locators) usados no Selenium WebDriver para encontrar elementos na página? Explique dois deles. (2 pontos)
ID: Localiza elementos pelo atributo “id”, sendo rápido e único.
CSS Selector: Usa seletores CSS para encontrar elementos com flexibilidade.


O que é um WebElement no Selenium? Dê um exemplo de como interagir com um WebElement usando Python. (2 pontos)
É um objeto que representa um elemento HTML na página.



No Selenium WebDriver, o que acontece se você tentar interagir com um elemento que ainda não está visível ou carregado na página? Qual comando você usaria para resolver isso? (2 pontos)
Se você tentar interagir com um elemento que ainda não está visível ou carregado haverão erros. Para evitar isso, você pode usar tanto uma espera fixa com o módulo time quanto uma espera dinâmica com WebDriverWait.




Cite duas limitações do Selenium IDE que podem levar à escolha do Selenium WebDriver em projetos maiores. (2 pontos)
O Selenium IDE possui limitações como a falta de suporte para lógica de programação avançada, como loops e condicionais, e a dificuldade de integração com ferramentas ou frameworks externos. Essas restrições tornam o Selenium WebDriver mais adequado para projetos maiores e mais complexos.


Parte 2: Questões Práticas (5 questões)

Crie um script em Python usando Selenium WebDriver que: (3 pontos)

Abra o navegador e acesse o site https://www.google.com.

Procure pela barra de pesquisa (search bar).

Digite a palavra "Python Selenium" e pressione Enter.

Faça uma captura de tela da página de resultados e salve como resultado.png.



Acesse o site https://example.com.

Clique em um botão ou link (especifique o elemento no teste).

Valide se o título da página mudou após a interação.

Exporte o script em formato .side.



Em Selenium WebDriver com Python, escreva um código para realizar o seguinte: (3 pontos)
Abrir o navegador e acessar https://www.selenium.dev/.

Navegar até a seção Downloads clicando no link correspondente.

Extraia o texto do cabeçalho principal (h1 ou h2) da página e imprima no console.



Durante a automação de testes, como você lidaria com pop-ups ou alertas usando Selenium WebDriver? Escreva um trecho de código em Python que feche um alerta assim que ele aparecer. (2 pontos)


Usando Python e Selenium WebDriver, desenvolva um script que: (3 pontos)

Acesse https://the-internet.herokuapp.com/login.

Preencha o formulário de login com as seguintes credenciais:

Username: "tomsmith"

Password: "SuperSecretPassword!"

Clique no botão de login.

Valide se o login foi bem-sucedido verificando a presença de uma mensagem específica como "You logged into a secure area!"

